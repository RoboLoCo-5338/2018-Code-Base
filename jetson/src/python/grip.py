import cv2
import numpy
import math
from enum import Enum

class GripPipeline:
    """
    An OpenCV pipeline generated by GRIP.
    """
    
    def __init__(self):
        """initializes all values to presets or None if need to be set
        """

        self.__resize_image_width = 320.0
        self.__resize_image_height = 240.0
        self.__resize_image_interpolation = cv2.INTER_CUBIC

        self.resize_image_output = None

        self.__rgb_threshold_input = self.resize_image_output
        self.__rgb_threshold_red = [168.0790960451977, 255.0]
        self.__rgb_threshold_green = [148.87005649717514, 255.0]
        self.__rgb_threshold_blue = [0.0, 114.84042553191487]

        self.rgb_threshold_output = None

        self.__cv_canny_image = self.rgb_threshold_output
        self.__cv_canny_threshold1 = 0.0
        self.__cv_canny_threshold2 = 0.0
        self.__cv_canny_aperturesize = 3.0
        self.__cv_canny_l2gradient = True

        self.cv_canny_output = None

        self.__find_lines_input = self.cv_canny_output

        self.find_lines_output = None


    def process(self, source0):
        """
        Runs the pipeline and sets all outputs to new values.
        """
        # Step Resize_Image0:
        self.__resize_image_input = source0
        (self.resize_image_output) = self.__resize_image(self.__resize_image_input, self.__resize_image_width, self.__resize_image_height, self.__resize_image_interpolation)

        # Step RGB_Threshold0:
        self.__rgb_threshold_input = self.resize_image_output
        (self.rgb_threshold_output) = self.__rgb_threshold(self.__rgb_threshold_input, self.__rgb_threshold_red, self.__rgb_threshold_green, self.__rgb_threshold_blue)

        # Step CV_Canny0:
        self.__cv_canny_image = self.rgb_threshold_output
        (self.cv_canny_output) = self.__cv_canny(self.__cv_canny_image, self.__cv_canny_threshold1, self.__cv_canny_threshold2, self.__cv_canny_aperturesize, self.__cv_canny_l2gradient)

        # Step Find_Lines0:
        self.__find_lines_input = self.cv_canny_output
        (self.find_lines_output) = self.__find_lines(self.__find_lines_input)


    @staticmethod
    def __resize_image(input, width, height, interpolation):
        """Scales and image to an exact size.
        Args:
            input: A numpy.ndarray.
            Width: The desired width in pixels.
            Height: The desired height in pixels.
            interpolation: Opencv enum for the type fo interpolation.
        Returns:
            A numpy.ndarray of the new size.
        """
        return cv2.resize(input, ((int)(width), (int)(height)), 0, 0, interpolation)

    @staticmethod
    def __rgb_threshold(input, red, green, blue):
        """Segment an image based on color ranges.
        Args:
            input: A BGR numpy.ndarray.
            red: A list of two numbers the are the min and max red.
            green: A list of two numbers the are the min and max green.
            blue: A list of two numbers the are the min and max blue.
        Returns:
            A black and white numpy.ndarray.
        """
        out = cv2.cvtColor(input, cv2.COLOR_BGR2RGB)
        return cv2.inRange(out, (red[0], green[0], blue[0]),  (red[1], green[1], blue[1]))

    @staticmethod
    def __cv_canny(image, thres1, thres2, aperture_size, gradient):
        """Applies a canny edge detection to the image.
        Args:
           image: A numpy.ndarray as the input.
           thres1: First threshold for the canny algorithm. (number)
           thres2: Second threshold for the canny algorithm. (number)
           aperture_size: Aperture size for the canny operation. (number)
           gradient: If the L2 norm should be used. (boolean)
        Returns:
            The edges as a numpy.ndarray.
        """
        return cv2.Canny(image, thres1, thres2, apertureSize=(int)(aperture_size),
            L2gradient=gradient)

    class Line:

        def __init__(self, x1, y1, x2, y2):
            self.x1 = x1
            self.y1 = y1
            self.x2 = x2
            self.y2 = y2

        def length(self):
            return numpy.sqrt(pow(self.x2 - self.x1, 2) + pow(self.y2 - self.y1, 2))

        def angle(self):
            return math.degrees(math.atan2(self.y2 - self.y1, self.x2 - self.x1))
    @staticmethod
    def __find_lines(input):
        """Finds all line segments in an image.
        Args:
            input: A numpy.ndarray.
        Returns:
            A filtered list of Lines.
        """
        detector = cv2.createLineSegmentDetector()
        if (len(input.shape) == 2 or input.shape[2] == 1):
            lines = detector.detect(input)
        else:
            tmp = cv2.cvtColor(input, cv2.COLOR_BGR2GRAY)
            lines = detector.detect(tmp)
        output = []
        if len(lines) != 0:
            for i in range(1, len(lines[0])):
                tmp = GripPipeline.Line(lines[0][i, 0][0], lines[0][i, 0][1],
                                lines[0][i, 0][2], lines[0][i, 0][3])
                output.append(tmp)
        return output



